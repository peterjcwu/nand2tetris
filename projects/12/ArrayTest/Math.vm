function Math.init 1
push constant 16
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
label IF_FALSE0
push argument 0
return
function Math.multiply 4
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
return
label IF_FALSE1
push argument 0
push constant 1
neg
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
neg
return
label IF_FALSE2
push argument 1
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
return
label IF_FALSE3
push argument 1
push constant 1
neg
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
neg
return
label IF_FALSE4
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
not
and
push argument 0
push constant 0
lt
not
push argument 1
push constant 0
lt
and
or
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
not
pop local 0
goto IF_END5
label IF_FALSE5
push constant 0
pop local 0
label IF_END5
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push constant 0
pop local 1
push argument 0
pop local 2
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push constant 16
lt
not
if-goto WHILE_END0
push argument 1
push local 3
call Math.bit 2
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 1
push local 2
add
pop local 1
label IF_FALSE6
push local 2
push local 2
add
pop local 2
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push local 0
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 1
neg
return
goto IF_END7
label IF_FALSE7
push local 1
return
label IF_END7
function Math.divide 2
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push argument 1
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
return
label IF_FALSE2
push argument 1
push constant 1
neg
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
neg
return
label IF_FALSE3
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
not
pop local 0
goto IF_END4
label IF_FALSE4
push constant 0
pop local 0
label IF_END4
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
label IF_FALSE5
push argument 1
push argument 1
add
push constant 0
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 1
return
label IF_FALSE6
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 1
push argument 0
push constant 2
push local 1
push argument 1
call Math.multiply 2
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 0
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 1
push local 1
add
neg
return
goto IF_END8
label IF_FALSE8
push local 1
push local 1
add
return
label IF_END8
goto IF_END7
label IF_FALSE7
push local 0
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 1
push local 1
add
push constant 1
add
neg
return
goto IF_END9
label IF_FALSE9
push local 1
push local 1
add
push constant 1
add
return
label IF_END9
label IF_END7
function Math.sqrt 5
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push constant 0
pop local 1
push constant 0
pop local 3
push constant 0
not
pop local 0
label WHILE_EXP0
push local 0
not
if-goto WHILE_END0
push argument 0
push local 3
push static 0
add
pop pointer 1
push that 0
gt
push argument 0
push local 3
push static 0
add
pop pointer 1
push that 0
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
push constant 1
add
pop local 3
goto IF_END2
label IF_FALSE2
push constant 0
pop local 0
label IF_END2
push local 3
push constant 15
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 0
label IF_FALSE3
goto WHILE_EXP0
label WHILE_END0
push local 3
push constant 2
call Math.divide 2
push constant 1
sub
pop local 2
label WHILE_EXP1
push local 2
push constant 0
gt
push local 2
push constant 0
eq
or
not
if-goto WHILE_END1
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
add
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
add
call Math.multiply 2
pop local 4
push local 4
push argument 0
lt
push local 4
push argument 0
eq
or
push local 4
and
push constant 0
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
add
pop local 1
label IF_FALSE4
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.bit 1
push argument 1
push constant 15
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
goto IF_END1
label IF_FALSE1
push constant 0
return
label IF_END1
label IF_FALSE0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
pop local 0
push local 0
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
goto IF_END2
label IF_FALSE2
push constant 0
not
return
label IF_END2
