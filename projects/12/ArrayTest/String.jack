// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    static int zeroAsciiVal;
    field int maxLength;
    field int length;
    field Array string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxL) {
        let zeroAsciiVal = 48;
        let length = 0;
        let maxLength = maxL;
        if(maxLength < 1)
        {
            let maxLength = 1;
        }
        let string = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let length = 0;
        let maxLength = 0;
        do string.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = maxLength)
        {
            do Sys.error(17);
        }
        let string[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        if(length < 0)
        {
            do Sys.error(18);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int retVal;
        var boolean isNeg;
        
        let isNeg = false;
        let retVal = 0;
        let i = 0;
        if(string[i] = 45) //ascii value '-'
        {
            let isNeg = true;
            let i = i + 1;
        }
        while(i < length)
        {
            let retVal = (string[i] - zeroAsciiVal) + (retVal * 10);
            let i = i + 1;
        }
        if(isNeg)
        {
            let retVal = retVal * -1;
        }
        return retVal;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int num;
        var boolean negative;
        let num = val;
        let length = 0;
        if(num < 0)
        {
            let num = num * -1;
            do appendChar(45); //45 is the ASCII value of '-'
        }
        do setIntWorker(num);
        return;
    }

    method void setIntWorker(int number)
    {
        var int lastChar;
        var int restOfNum;
        if(number = 0)
        {
            return;
        }
        let restOfNum = number / 10;
        let lastChar = number - (restOfNum * 10);
        do setIntWorker(restOfNum);
        do appendChar(lastChar + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
