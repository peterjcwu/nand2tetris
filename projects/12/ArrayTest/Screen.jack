// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean isBlack;
    static int SCREEN_ADDR;
    static int KEYBOARD_ADDR;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int curVal;
        
        let twoToThe = Array.new(16);
        let isBlack = true;
        let SCREEN_ADDR = 16384;
        let KEYBOARD_ADDR = 24576;

        let curVal = 1;
        let i = 0;
        while(i < 16)
        {
            let twoToThe[i] = curVal;
            let curVal = curVal + curVal;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = SCREEN_ADDR;
        while(i < KEYBOARD_ADDR)
        {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr;
        var int pixelVal;
        var int bitIdx;
        var int xDiv16;

        if((x < 0) | (x > 511) | (y < 0) | (y > 255))
        {
            do Sys.error(7);
        }

        let xDiv16 = x / 16;
        let bitIdx = x - (xDiv16 * 16);
        let addr = SCREEN_ADDR + ((y * 32) + xDiv16);
        let pixelVal = Memory.peek(addr);
        if(isBlack)
        {
            let pixelVal = twoToThe[bitIdx] | pixelVal;
        }
        else
        {
            let pixelVal = (~twoToThe[bitIdx]) & pixelVal;
        }
        do Memory.poke(addr, pixelVal);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinusbdx;
        // check for illegal x and y coordinates
        if(((x1 < 0) | ~(x1 < 512)) | ((x2 < 0) | ~(x2 < 512))) {
            do Sys.error(8);
        }
        if(((y1 < 0) | ~(y1 < 256)) | ((y2 < 0) | ~(y2 < 256))) {
            do Sys.error(8);
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        if((dx = 0) & (dy = 0)) {
            do Screen.drawPixel(x1, y1);
            return;
        }

        // vertical line
        if(dx = 0) {       
            if(dy > 0) {
            while(~(y1 > y2)) {
                do Screen.drawPixel(x1, y1);
                let y1 = y1 + 1;
            }
            } else {
            while(~(y1 < y2)) {
                do Screen.drawPixel(x1, y1);
                let y1 = y1 - 1;
            }
            }

            return;
        }

        // horizontal line
        if(dy = 0) {        
            if(dx > 0) {
            while(~(x1 > x2)) {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 + 1;
            }
            } else {
            while(~(x1 < x2)) {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 - 1;
            }
            }
            return;
        }

        // diagonal line
        let adyMinusbdx = 0;
        let a = 0;
        let b = 0;
        while(~(Math.abs(a) > Math.abs(dx)) & ~(Math.abs(b) > Math.abs(dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if(adyMinusbdx < 0) {
            if((dx > 0) & (dy > 0)) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            if((dx > 0) & (dy < 0)) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx - dy;
            }
            if((dx < 0) & (dy > 0)) {
                let a = a - 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            if((dx < 0) & (dy < 0)) {
                let a = a - 1;
                let adyMinusbdx = adyMinusbdx - dy;
            }
            } else {
            if((dy > 0) & (dx > 0)) {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
            if((dy > 0) & (dx < 0)) {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx + dx;
            }
            if((dy < 0) & (dx > 0)) {
                let b = b - 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
            if((dy < 0) & (dx < 0)) {
                let b = b - 1;
                let adyMinusbdx = adyMinusbdx + dx;
            }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int yCount;
        let yCount = y1;
        while(yCount < y2)
        {
            do Screen.drawLine(x1, yCount, x2, yCount);
            let yCount = yCount + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int cx, int cy, int r) {
    var int dy, term;
      if((cx < 0) | ~(cx < 512)) {  // check for illegal x coordinate
        do Sys.error(12);
      }
      if((cy < 0) | ~(cy < 256)) {  // check for illegal y coordinate
        do Sys.error(12);
      }
      // check for illegal radius
      if(((cx + r) > 511) | ((cx - r) < 0)) {
        do Sys.error(13);
      }
      if(((cy + r) > 255) | ((cy - r) < 0)) {
        do Sys.error(13);
      }
      if(r > 181) {
        do Sys.error(13);
      }

      let dy = -r;
      while(~(dy > r)) {
        let term = Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));
        do Screen.drawLine((cx - term), cy + dy, (cx + term), cy + dy);
        let dy = dy + 1;
      }
      return;
    }
}
